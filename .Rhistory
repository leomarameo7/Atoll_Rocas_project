levels = c("Negaprion brevirostris","Ginglymostoma cirratum","Lutjanus jocu",
"Cephalopholis fulva", "Carangidae","Acanthurus spp.",
"Stegastes rocasensis","Thalassoma noronhanum",
"Abudefduf saxatilis", "Sparisoma spp.", "Melichthys niger",
"Kyphosus spp.", "Mulloidichthys martinicus",
"Holocentrus adscensionis","Haemulidae", "Cryptobenthic reef fishes"))
d$scenario <- factor(d$scenario,
levels = c("Status quo", "RCP 2.6", "RCP 4.5", "RCP 8.5"))
#####Data frame with median for each species ######
#Made data-frame with median of the Status quo scenario
median_statusquo <- d %>%
filter(scenario == "Status quo") %>%
group_by(scenario,year, species) %>%
summarise_all(funs(mean,median,sd, max, min))
median_statusquo$species <- factor(median_statusquo$species,
levels = c("Negaprion brevirostris","Ginglymostoma cirratum","Lutjanus jocu",
"Cephalopholis fulva", "Carangidae","Acanthurus spp.",
"Stegastes rocasensis", "Thalassoma noronhanum",
"Abudefduf saxatilis", "Sparisoma spp.", "Melichthys niger",
"Kyphosus spp.", "Mulloidichthys martinicus",
"Holocentrus adscensionis",
"Haemulidae", "Cryptobenthic reef fishes"))
##### boxplot for the 2100 year and fish species ####
p <- ggplot(d, aes(x = scenario, y = biomass, fill = scenario, facets = species)) +
geom_boxplot(aes(x = as.factor(scenario), y = as.numeric(biomass), fill = scenario),
width = 0.35, fatten = 2.5,  notch = F, alpha = 0.75, outlier.shape = NA) +
facet_wrap(~ species, scales = "free_y") +
geom_hline(data = median_statusquo, aes(yintercept = median_statusquo$median),
colour = "red", lty = "longdash", lwd = 0.35) +
theme_bw() +
labs(x = "Scenarios", y = expression(Biomass~""~(g~m^{-2}))) +
theme(text = element_text(family = "Times New Roman"),
legend.position = "none",
strip.text.x = element_text(size = 10, color = "black", face = "bold.italic"),
axis.text.x = element_text(size = 10,  color = "black"),
axis.title.x = element_text(size = 15),
axis.text.y  = element_text(size = 11,  color = "black"),
axis.title.y = element_text(size = 15),
panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_brewer(palette = "RdBu", direction = -1)
#####Function to modify facet scales in ggplot2
#from https://fishandwhistle.net/post/2018/modifying-facet-scales-in-ggplot2/
Facet <- ggproto(
init_scales = function(layout, x_scale = NULL, y_scale = NULL, params) {
scales <- list()
if (!is.null(x_scale)) {
scales$x <- plyr::rlply(max(layout$SCALE_X), x_scale$clone())
}
if (!is.null(y_scale)) {
scales$y <- plyr::rlply(max(layout$SCALE_Y), y_scale$clone())
}
scales
},
)
scale_override <- function(which, scale) {
if(!is.numeric(which) || (length(which) != 1) || (which %% 1 != 0)) {
stop("which must be an integer of length 1")
}
if(is.null(scale$aesthetics) || !any(c("x", "y") %in% scale$aesthetics)) {
stop("scale must be an x or y position scale")
}
structure(list(which = which, scale = scale), class = "scale_override")
}
CustomFacetWrap <- ggproto(
"CustomFacetWrap", FacetWrap,
init_scales = function(self, layout, x_scale = NULL, y_scale = NULL, params) {
# make the initial x, y scales list
scales <- ggproto_parent(FacetWrap, self)$init_scales(layout, x_scale, y_scale, params)
if(is.null(params$scale_overrides)) return(scales)
max_scale_x <- length(scales$x)
max_scale_y <- length(scales$y)
# ... do some modification of the scales$x and scales$y here based on params$scale_overrides
for(scale_override in params$scale_overrides) {
which <- scale_override$which
scale <- scale_override$scale
if("x" %in% scale$aesthetics) {
if(!is.null(scales$x)) {
if(which < 0 || which > max_scale_x) stop("Invalid index of x scale: ", which)
scales$x[[which]] <- scale$clone()
}
} else if("y" %in% scale$aesthetics) {
if(!is.null(scales$y)) {
if(which < 0 || which > max_scale_y) stop("Invalid index of y scale: ", which)
scales$y[[which]] <- scale$clone()
}
} else {
stop("Invalid scale")
}
# return scales
scales
}
)
facet_wrap_custom <- function(..., scale_overrides = NULL) {
# take advantage of the sanitizing that happens in facet_wrap
facet_super <- facet_wrap(...)
# sanitize scale overrides
if(inherits(scale_overrides, "scale_override")) {
scale_overrides <- list(scale_overrides)
} else if(!is.list(scale_overrides) ||
!all(vapply(scale_overrides, inherits, "scale_override", FUN.VALUE = logical(1)))) {
stop("scale_overrides must be a scale_override object or a list of scale_override objects")
}
facet_super$params$scale_overrides <- scale_overrides
ggproto(NULL, CustomFacetWrap,
shrink = facet_super$shrink,
params = facet_super$params
)
}
#Before to run the code below, remember to run the function contained in the script "function_modify_facet_scale"
p<- p +
facet_wrap_custom(~species, scales = "free_y", ncol = 4,nrow = 4, scale_overrides = list(
scale_override(1, scale_y_continuous(limits  = c(0, 0.60), breaks = seq(0,.60,0.15))),
scale_override(2, scale_y_continuous(limits  = c(0, 12), breaks = seq(0,12,1))),
scale_override(3, scale_y_continuous(limits  = c(0, 2.05), breaks = seq(0,2.05,0.5))),
scale_override(4, scale_y_continuous(limits  = c(0, 0.75), breaks = seq(0,0.75,0.25))),
scale_override(7, scale_y_continuous(limits  = c(0, 0.8), breaks = seq(0,0.8,0.2))),
scale_override(9, scale_y_continuous(limits  = c(0, 1.5), breaks = seq(0,1.5,.25))),
scale_override(2, scale_y_continuous(limits  = c(1, 3.5))),
scale_override(13, scale_y_continuous(limits  = c(0, 2.5), breaks = seq(0,2.5,.5))),
scale_override(15, scale_y_continuous(limits  = c(0, 1.75), breaks = seq(0,1.75,.5)))
))
p <- ggplot(d, aes(x = scenario, y = biomass, fill = scenario, facets = species)) +
geom_boxplot(aes(x = as.factor(scenario), y = as.numeric(biomass), fill = scenario),
width = 0.35, fatten = 2.5,  notch = F, alpha = 0.75, outlier.shape = NA) +
facet_wrap(~ species, scales = "free_y") +
geom_hline(data = median_statusquo, aes(yintercept = median_statusquo$median),
colour = "red", lty = "longdash", lwd = 0.35) +
theme_bw() +
labs(x = "Scenarios", y = expression(Biomass~""~(g~m^{-2}))) +
theme(text = element_text(family = "Times New Roman"),
legend.position = "none",
strip.text.x = element_text(size = 10, color = "black", face = "bold.italic"),
axis.text.x = element_text(size = 10,  color = "black"),
axis.title.x = element_text(size = 15),
axis.text.y  = element_text(size = 11,  color = "black"),
axis.title.y = element_text(size = 15),
panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_brewer(palette = "RdBu", direction = -1)
Facet <- ggproto(
init_scales = function(layout, x_scale = NULL, y_scale = NULL, params) {
scales <- list()
if (!is.null(x_scale)) {
scales$x <- plyr::rlply(max(layout$SCALE_X), x_scale$clone())
}
if (!is.null(y_scale)) {
scales$y <- plyr::rlply(max(layout$SCALE_Y), y_scale$clone())
}
scales
},
)
scale_override <- function(which, scale) {
if(!is.numeric(which) || (length(which) != 1) || (which %% 1 != 0)) {
stop("which must be an integer of length 1")
}
if(is.null(scale$aesthetics) || !any(c("x", "y") %in% scale$aesthetics)) {
stop("scale must be an x or y position scale")
}
structure(list(which = which, scale = scale), class = "scale_override")
}
CustomFacetWrap <- ggproto(
"CustomFacetWrap", FacetWrap,
init_scales = function(self, layout, x_scale = NULL, y_scale = NULL, params) {
# make the initial x, y scales list
scales <- ggproto_parent(FacetWrap, self)$init_scales(layout, x_scale, y_scale, params)
if(is.null(params$scale_overrides)) return(scales)
max_scale_x <- length(scales$x)
max_scale_y <- length(scales$y)
# ... do some modification of the scales$x and scales$y here based on params$scale_overrides
for(scale_override in params$scale_overrides) {
which <- scale_override$which
scale <- scale_override$scale
if("x" %in% scale$aesthetics) {
if(!is.null(scales$x)) {
if(which < 0 || which > max_scale_x) stop("Invalid index of x scale: ", which)
scales$x[[which]] <- scale$clone()
}
} else if("y" %in% scale$aesthetics) {
if(!is.null(scales$y)) {
if(which < 0 || which > max_scale_y) stop("Invalid index of y scale: ", which)
scales$y[[which]] <- scale$clone()
}
} else {
stop("Invalid scale")
}
# return scales
scales
}
)
facet_wrap_custom <- function(..., scale_overrides = NULL) {
# take advantage of the sanitizing that happens in facet_wrap
facet_super <- facet_wrap(...)
# sanitize scale overrides
if(inherits(scale_overrides, "scale_override")) {
scale_overrides <- list(scale_overrides)
} else if(!is.list(scale_overrides) ||
!all(vapply(scale_overrides, inherits, "scale_override", FUN.VALUE = logical(1)))) {
stop("scale_overrides must be a scale_override object or a list of scale_override objects")
}
facet_super$params$scale_overrides <- scale_overrides
ggproto(NULL, CustomFacetWrap,
shrink = facet_super$shrink,
params = facet_super$params
)
}
#Before to run the code below, remember to run the function contained in the script "function_modify_facet_scale"
p <- p +
facet_wrap_custom(~species, scales = "free_y", ncol = 4,nrow = 4, scale_overrides = list(
scale_override(1, scale_y_continuous(limits  = c(0, 0.60), breaks = seq(0,.60,0.15))),
scale_override(2, scale_y_continuous(limits  = c(0, 12), breaks = seq(0,12,1))),
scale_override(3, scale_y_continuous(limits  = c(0, 2.05), breaks = seq(0,2.05,0.5))),
scale_override(4, scale_y_continuous(limits  = c(0, 0.75), breaks = seq(0,0.75,0.25))),
scale_override(7, scale_y_continuous(limits  = c(0, 0.8), breaks = seq(0,0.8,0.2))),
scale_override(9, scale_y_continuous(limits  = c(0, 1.5), breaks = seq(0,1.5,.25))),
scale_override(2, scale_y_continuous(limits  = c(1, 3.5))),
scale_override(13, scale_y_continuous(limits  = c(0, 2.5), breaks = seq(0,2.5,.5))),
scale_override(15, scale_y_continuous(limits  = c(0, 1.75), breaks = seq(0,1.75,.5)))
))
p
knitr::opts_chunk$set(
comment = '#>',
collapse = T)
library(Rpath)
library(data.table)
library(readr)
#Groups and types for the R Ecosystem
groups <- c('Seabirds', "Negaprion brevirostris",
"Ginglymostoma cirratum","Lutjanus jocu",
"Cephalopholis fulva", "Carangidae","Acanthurus spp.",
"Stegastes rocasensis", "Thalassoma noronhanum",
"Abudefduf saxatilis", "Sparisoma spp.", "Melichthys niger",
"Kyphosus spp.", "Mulloidichthys martinicus",
"Holocentrus adscensionis","Haemulidae", "Cryptobenthic reef fishes",
"Turtles","Cephalopoda","Panulirus spp.",
"Benthic macroinvertebrates", "Benthic microinvertebrates",
"Siderastrea stellata","Zooplankton","Phytoplankton","Digenea simplex","Other algal turf", "Detritus", "fleets")
types  <- c(rep(0, 22), 0.8, 0, rep(1, 3), 2, 3)
REco.params <- create.rpath.params(group = groups,
type = types, stgroup = NA)
#load basic input from my model EwE-  Rocas Atoll
basic_input <- read_csv("data/raw/basic_input.csv")
#Filling columns a Biomass, PB and QB, Biomass accumulation parameters
biomass <- basic_input$`Biomass in habitat area (t/km²)`
REco.params$model[, Biomass := biomass]
pb <- c(5.4,0.264,0.566,0.524,1.3,1.163,0.96,1.74,1.67,1.22,1.02,1.32,0.73,1.92,1.24,1.07,2.73,0.29,6.4,1.28,3.8,4.94,1.66,87,109.5,274,323,NA, NA)
REco.params$model[, PB := pb]
qb <- c(76.5, 3.2, 3.1, 5.5, 6.7, 11.3, 10.9, 14.7, 14.1, 11.2, 6.2, 10, 27.5, 9.6,8.3, 11.6, 25.1, 2.35, 36.5, 7.4, 10, 16.69, 9.4, 160,NA,NA,NA,NA,NA)
REco.params$model[, QB := qb]
ba<- c(0, 0, 0.558, -0.1378252, 0.1081793, 0.9327999, -0.08161397, -0.005367057,            0.004389316, 0.0818163, 0.2839955, 0.1026, 0, 0.4368, 0.9002874, 0.08392983,
-0.1343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0)
REco.params$model[, BioAcc  := ba]
#Set parameters for Unassimilation
REco.params$model[, Unassim := c(rep(0.2, 20), 0.4,0.4, 0.2,0.4, 0, 0, 0, 0,0)]
#EE for groups w/o biomass
REco.params$model[Group %in% 'Benthic macroinvertebrates', EE := 0.9]
REco.params$model[Group %in% 'Benthic microinvertebrates', EE := 0.85]
#Detrital Fate
REco.params$model[, Detritus := c(rep(1, 27), rep(0, 2))]
#
View(REco.params$model)
knitr::kable(REco.params$model,
caption = 'Example of completed model list')
#load basic input from my model EwE-  Rocas Atoll
diet_matrix <- read.csv("data/raw/diet_matrix_atoll_rocas.csv")
#remove lines 30 and 31
diet_matrix<- diet_matrix[c(-30,-31),]
#Convert columns X3,X5 and X6 class as numeric
diet_matrix$X3<- as.numeric(paste(diet_matrix$X3))
diet_matrix$X5<- as.numeric(paste(diet_matrix$X5))
diet_matrix$X6<- as.numeric(paste(diet_matrix$X6))
#diet sea birds
seabirds.diet<-diet_matrix$X1
REco.params$diet[, "Seabirds" := seabirds.diet]
#diet Negaprion brevirostris
Negaprion.diet<- diet_matrix$X2
REco.params$diet[,"Negaprion brevirostris":=Negaprion.diet]
#diet Ginglymostoma cirratum
Ginglymostoma.diet<- as.numeric(diet_matrix$X3)
REco.params$diet[,"Ginglymostoma cirratum":=Ginglymostoma.diet]
#diet Lutjanus jocu
Lutjanus_jocu.diet<- as.numeric(diet_matrix$X4)
REco.params$diet[,"Lutjanus jocu":= Lutjanus_jocu.diet]
#diet Cephalopholis fulva
Cephalopholis_fulva.diet<- as.numeric(diet_matrix$X5)
REco.params$diet[,"Cephalopholis fulva":= Cephalopholis_fulva.diet]
#diet Carangidae
Carangidae.diet<- as.numeric(diet_matrix$X6)
REco.params$diet[,"Carangidae":= Carangidae.diet]
#diet Acanthurus spp.
Acanthurus_spp.diet<- as.numeric(diet_matrix$X7)
REco.params$diet[,"Acanthurus spp.":= Acanthurus_spp.diet]
#diet stegastes rocasensis
Stegastes_rocasensis.diet<- as.numeric(diet_matrix$X8)
REco.params$diet[,"Stegastes rocasensis":= Stegastes_rocasensis.diet]
#diet Thalassoma noronhanum
Thalassoma.diet<- as.numeric(diet_matrix$X9)
REco.params$diet[,"Thalassoma noronhanum":= Thalassoma.diet]
#diet Abudefduf saxatilis
Abudefduf.diet <- as.numeric(diet_matrix$X10)
REco.params$diet[,"Abudefduf saxatilis":= Abudefduf.diet]
#diet Sparisoma spp.
Sparisoma_spp.diet <- as.numeric(diet_matrix$X11)
REco.params$diet[,"Sparisoma spp." := Sparisoma_spp.diet]
#diet Melichthys_niger
Melichthys_niger.diet <- as.numeric(diet_matrix$X12)
REco.params$diet[,"Melichthys niger" := Melichthys_niger.diet]
#diet Kyphosus spp.
Kyphosus_spp.diet <- as.numeric(diet_matrix$X13)
REco.params$diet[,"Kyphosus spp." := Kyphosus_spp.diet]
#diet Mulloidichthys_martinicus
Mulloidichthys_martinicus.diet <- as.numeric(diet_matrix$X14)
REco.params$diet[,"Mulloidichthys martinicus" := Mulloidichthys_martinicus.diet]
#diet Holocentrus adscensionis
Holocentrus_adscensionis.diet <- as.numeric(diet_matrix$X15)
REco.params$diet[,"Holocentrus adscensionis" := Holocentrus_adscensionis.diet]
#diet Haemulidae
Haemulidae.diet <- as.numeric(diet_matrix$X16)
REco.params$diet[,"Haemulidae" := Haemulidae.diet]
#diet Cryptobenthic reef fishes
Cryptobenthic.diet <- as.numeric(diet_matrix$X17)
REco.params$diet[,"Cryptobenthic reef fishes" := Cryptobenthic.diet]
#diet Turtles
Turtles.diet <- as.numeric(diet_matrix$X18)
REco.params$diet[,"Turtles" := Turtles.diet]
#diet Cephalopoda
Cephalopoda.diet <- as.numeric(diet_matrix$X19)
REco.params$diet[,"Cephalopoda" := Cephalopoda.diet]
#diet Panulirus spp.
Panulirus_spp.diet <- as.numeric(diet_matrix$X20)
REco.params$diet[,"Panulirus spp.":= Panulirus_spp.diet]
#diet Benthic macroinvertebrates
Benthic_macroinvertebrates.diet <- as.numeric(diet_matrix$X21)
REco.params$diet[,"Benthic macroinvertebrates":= Benthic_macroinvertebrates.diet]
#diet Benthic microinvertebrates
Benthic_microinvertebrates.diet <- as.numeric(diet_matrix$X22)
REco.params$diet[,"Benthic microinvertebrates":= Benthic_microinvertebrates.diet]
#diet Siderastrea stellata
Siderastrea_stellata.diet <- c(0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0,
0, 1, 0, 0, 0, 0, 0)
REco.params$diet[,"Siderastrea stellata" := Siderastrea_stellata.diet]
#diet Zooplankton
Zooplankton.diet <- as.numeric(diet_matrix$X24)
REco.params$diet[,"Zooplankton" := Zooplankton.diet]
View(REco.params$diet)
knitr::kable(REco.params$diet, caption = 'Diet parameters for Rocas Atoll Ecosystem',
digits = 3, drop0trailing = TRUE)
REco <- rpath(REco.params, eco.name = 'Rpath Rocas Atoll marine food web ')
REco
print(REco, morts = T)
check.rpath.params(REco.params)
summary(REco)
REco$TL
p <- webplot(REco, line.col = "gray44", eco.name = "Rocas Atoll marine food web", labels = T, label.pos = 1, fleets = F, type.col = c("black","forestgreen","brown","white"), label.cex = 0.75, )
p
View(REco.params)
write.Rpath(x=REco,file = "REco.atoll.Rdata", morts=T,path ="data/processed/"  )
write.Rpath(x=REco,file = "REco.atoll.csv", morts=T,path ="data/processed/")
library(Rpath)
library(data.table)
library(readr)
knitr::opts_chunk$set(
comment = '#>',
collapse = T)
library(Rpath)
library(data.table)
library(readr)
#Groups and types for the Rocas Atoll Ecosystem
groups <- c('Seabirds', "Negaprion brevirostris",
"Ginglymostoma cirratum","Lutjanus jocu",
"Cephalopholis fulva", "Carangidae","Acanthurus spp.",
"Stegastes rocasensis", "Thalassoma noronhanum",
"Abudefduf saxatilis", "Sparisoma spp.", "Melichthys niger",
"Kyphosus spp.", "Mulloidichthys martinicus",
"Holocentrus adscensionis","Haemulidae", "Cryptobenthic reef fishes",
"Turtles","Cephalopoda","Panulirus spp.",
"Benthic macroinvertebrates", "Benthic microinvertebrates",
"Siderastrea stellata","Zooplankton","Phytoplankton","Digenea simplex","Other algal turf", "Detritus", "fleets")
types  <- c(rep(0, 22), 0.8, 0, rep(1, 3), 2, 3)
REco.params <- create.rpath.params(group = groups,
type = types, stgroup = NA)
#load basic input from my model EwE-  Rocas Atoll
basic_input <- read_csv("data/raw/basic_input.csv")
#Filling columns a Biomass, PB and QB, Biomass accumulation parameters
biomass <- basic_input$`Biomass in habitat area (t/km²)`
REco.params$model[, Biomass := biomass]
pb <- c(5.4,0.264,0.566,0.524,1.3,1.163,0.96,1.74,1.67,1.22,1.02,1.32,0.73,1.92,1.24,1.07,2.73,0.29,6.4,1.28,3.8,4.94,1.66,87,109.5,274,323,NA, NA)
REco.params$model[, PB := pb]
qb <- c(76.5, 3.2, 3.1, 5.5, 6.7, 11.3, 10.9, 14.7, 14.1, 11.2, 6.2, 10, 27.5, 9.6,8.3, 11.6, 25.1, 2.35, 36.5, 7.4, 10, 16.69, 9.4, 160,NA,NA,NA,NA,NA)
REco.params$model[, QB := qb]
ba <- c(0, 0, 0.558, -0.1378252, 0.1081793, 0.9327999, -0.08161397, -0.005367057, 0.004389316, 0.0818163, 0.2839955, 0.1026, 0, 0.4368, 0.9002874, 0.08392983, -0.1343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0)
REco.params$model[, BioAcc  := ba]
#Set parameters for Unassimilation
REco.params$model[, Unassim := c(rep(0.2, 20), 0.4,0.4, 0.2,0.4, 0, 0, 0, 0,0)]
#EE for groups w/o biomass
REco.params$model[Group %in% 'Benthic macroinvertebrates', EE := 0.9]
REco.params$model[Group %in% 'Benthic microinvertebrates', EE := 0.85]
#Detrital Fate
REco.params$model[, Detritus := c(rep(1, 27), rep(0, 2))]
#
View(REco.params$model)
knitr::kable(REco.params$model,
caption = 'Example of completed model list')
#load basic input from my model EwE-  Rocas Atoll
diet_matrix <- read.csv("data/raw/diet_matrix_atoll_rocas.csv")
#remove lines 30 and 31
diet_matrix<- diet_matrix[c(-30,-31),]
#Convert columns X3,X5 and X6 class as numeric
diet_matrix$X3<- as.numeric(paste(diet_matrix$X3))
diet_matrix$X5<- as.numeric(paste(diet_matrix$X5))
diet_matrix$X6<- as.numeric(paste(diet_matrix$X6))
#diet sea birds
seabirds.diet<-diet_matrix$X1
REco.params$diet[, "Seabirds" := seabirds.diet]
#diet Negaprion brevirostris
Negaprion.diet<- diet_matrix$X2
REco.params$diet[,"Negaprion brevirostris":=Negaprion.diet]
#diet Ginglymostoma cirratum
Ginglymostoma.diet<- as.numeric(diet_matrix$X3)
REco.params$diet[,"Ginglymostoma cirratum":=Ginglymostoma.diet]
#diet Lutjanus jocu
Lutjanus_jocu.diet<- as.numeric(diet_matrix$X4)
REco.params$diet[,"Lutjanus jocu":= Lutjanus_jocu.diet]
#diet Cephalopholis fulva
Cephalopholis_fulva.diet<- as.numeric(diet_matrix$X5)
REco.params$diet[,"Cephalopholis fulva":= Cephalopholis_fulva.diet]
#diet Carangidae
Carangidae.diet<- as.numeric(diet_matrix$X6)
REco.params$diet[,"Carangidae":= Carangidae.diet]
#diet Acanthurus spp.
Acanthurus_spp.diet<- as.numeric(diet_matrix$X7)
REco.params$diet[,"Acanthurus spp.":= Acanthurus_spp.diet]
#diet stegastes rocasensis
Stegastes_rocasensis.diet<- as.numeric(diet_matrix$X8)
REco.params$diet[,"Stegastes rocasensis":= Stegastes_rocasensis.diet]
#diet Thalassoma noronhanum
Thalassoma.diet<- as.numeric(diet_matrix$X9)
REco.params$diet[,"Thalassoma noronhanum":= Thalassoma.diet]
#diet Abudefduf saxatilis
Abudefduf.diet <- as.numeric(diet_matrix$X10)
REco.params$diet[,"Abudefduf saxatilis":= Abudefduf.diet]
#diet Sparisoma spp.
Sparisoma_spp.diet <- as.numeric(diet_matrix$X11)
REco.params$diet[,"Sparisoma spp." := Sparisoma_spp.diet]
#diet Melichthys_niger
Melichthys_niger.diet <- as.numeric(diet_matrix$X12)
REco.params$diet[,"Melichthys niger" := Melichthys_niger.diet]
#diet Kyphosus spp.
Kyphosus_spp.diet <- as.numeric(diet_matrix$X13)
REco.params$diet[,"Kyphosus spp." := Kyphosus_spp.diet]
#diet Mulloidichthys_martinicus
Mulloidichthys_martinicus.diet <- as.numeric(diet_matrix$X14)
REco.params$diet[,"Mulloidichthys martinicus" := Mulloidichthys_martinicus.diet]
#diet Holocentrus adscensionis
Holocentrus_adscensionis.diet <- as.numeric(diet_matrix$X15)
REco.params$diet[,"Holocentrus adscensionis" := Holocentrus_adscensionis.diet]
#diet Haemulidae
Haemulidae.diet <- as.numeric(diet_matrix$X16)
REco.params$diet[,"Haemulidae" := Haemulidae.diet]
#diet Cryptobenthic reef fishes
Cryptobenthic.diet <- as.numeric(diet_matrix$X17)
REco.params$diet[,"Cryptobenthic reef fishes" := Cryptobenthic.diet]
#diet Turtles
Turtles.diet <- as.numeric(diet_matrix$X18)
REco.params$diet[,"Turtles" := Turtles.diet]
#diet Cephalopoda
Cephalopoda.diet <- as.numeric(diet_matrix$X19)
REco.params$diet[,"Cephalopoda" := Cephalopoda.diet]
#diet Panulirus spp.
Panulirus_spp.diet <- as.numeric(diet_matrix$X20)
REco.params$diet[,"Panulirus spp.":= Panulirus_spp.diet]
#diet Benthic macroinvertebrates
Benthic_macroinvertebrates.diet <- as.numeric(diet_matrix$X21)
REco.params$diet[,"Benthic macroinvertebrates":= Benthic_macroinvertebrates.diet]
#diet Benthic microinvertebrates
Benthic_microinvertebrates.diet <- as.numeric(diet_matrix$X22)
REco.params$diet[,"Benthic microinvertebrates":= Benthic_microinvertebrates.diet]
#diet Siderastrea stellata
Siderastrea_stellata.diet <- c(0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0,
0, 1, 0, 0, 0, 0, 0)
REco.params$diet[,"Siderastrea stellata" := Siderastrea_stellata.diet]
#diet Zooplankton
Zooplankton.diet <- as.numeric(diet_matrix$X24)
REco.params$diet[,"Zooplankton" := Zooplankton.diet]
View(REco.params$diet)
knitr::kable(REco.params$diet, caption = 'Diet parameters for Rocas Atoll Ecosystem',
digits = 3, drop0trailing = TRUE)
REco <- rpath(REco.params, eco.name = 'Rpath Rocas Atoll marine food web ')
REco
print(REco, morts = T)
check.rpath.params(REco.params)
summary(REco)
REco$TL
p <- webplot(REco, line.col = "gray44", eco.name = "Rocas Atoll marine food web", labels = T, label.pos = 1, fleets = F, type.col = c("black","forestgreen","brown","white"), label.cex = 0.75, )
p
write.Rpath(x=REco,file = "REco.atoll.csv", morts=T,path ="data/processed/")
View(REco)
write.Rpath(x=REco,file = "REco.atoll.Rdata", morts=T,path ="data/processed/")
load("/Users/leonardocapitani/Dropbox/Atoll_Rocas_project/REco.atoll.Rdata")
View(out)
load("/Users/leonardocapitani/Dropbox/Atoll_Rocas_project/REco.atoll.Rdata")
View(REco)
write.rpath.params(Rpath.params = REco.params,eco.name = Rocas Atoll, path="outputs_results/")
write.rpath.params(Rpath.params = REco.params,eco.name = "Rocas Atoll", path="outputs_results/")
